#import NonEmptyString, Sidereal, TargetId, Nonsidereal from "lucuma/schemas/ObservationDB.graphql"
#import SiderealInput, NonsiderealInput, WavelengthInput, AngleInput from "lucuma/schemas/ObservationDB.graphql"
#import Long, BigDecimal, Timestamp from "lucuma/schemas/ObservationDB.graphql"

"""Target properties input"""
input TargetPropertiesInput {
  id: TargetId!
  name: NonEmptyString!
  sidereal: SiderealInput
  nonsidereal: NonsiderealInput
  wavelength: WavelengthInput!
}

type Distance {
    micrometers: Long!
    millimeters: BigDecimal!
}

input DistanceInput {
    micrometers: Long
    millimeters: BigDecimal
}

type PointOrigin {
    x: Distance!
    y: Distance!
}

input PointOriginInput {
    x: DistanceInput!
    y: DistanceInput!
}

input InstrumentSpecificsInput {
    iaa: AngleInput!
    focusOffset: DistanceInput!
    agName: String!
    origin: PointOriginInput!
}

"""Slew Options input"""
input SlewOptionsInput {
    zeroChopThrow:            Boolean!
    zeroSourceOffset:         Boolean!
    zeroSourceDiffTrack:      Boolean!
    zeroMountOffset:          Boolean!
    zeroMountDiffTrack:       Boolean!
    shortcircuitTargetFilter: Boolean!
    shortcircuitMountFilter:  Boolean!
    resetPointing:            Boolean!
    stopGuide:                Boolean!
    zeroGuideOffset:          Boolean!
    zeroInstrumentOffset:     Boolean!
    autoparkPwfs1:            Boolean!
    autoparkPwfs2:            Boolean!
    autoparkOiwfs:            Boolean!
    autoparkGems:             Boolean!
    autoparkAowfs:            Boolean!
}

enum ParkStatus {
    NOT_PARKED
    PARKED
}

enum FollowStatus {
    NOT_FOLLOWING
    FOLLOWING
}

type MountStatus {
    parked: ParkStatus!
    follow: FollowStatus!
}

type TelescopeStatus {
    mount: MountStatus!
}

input GuiderConfig{
    target: TargetPropertiesInput!
    tracking: ProbeTrackingInput!
}

input SlewInput {
    slewOptions: SlewOptionsInput!
    baseTarget: TargetPropertiesInput!
    instParams: InstrumentSpecificsInput!
    oiwfs: GuiderConfig
    rotator: RotatorTrackingInput!
}

enum RotatorTrackingMode {
    TRACKING
    FIXED
}

input RotatorTrackingInput {
    ipa: AngleInput!
    mode: RotatorTrackingMode!
}

input ProbeTrackingInput {
    nodAchopA: Boolean!
    nodAchopB: Boolean!
    nodBchopA: Boolean!
    nodBchopB: Boolean!
}

type Target {
  """Target ID"""
  id: TargetId!

  """Target name."""
  name: NonEmptyString!

  """Sidereal tracking information, if this is a sidereal target"""
  sidereal: Sidereal

  """Nonsidereal tracking information, if this is a nonsidereal target"""
  nonsidereal: Nonsidereal
}

enum LogLevel {
    ERROR
    WARN
    INFO
    DEBUG
    TRACE
}

type LogMessage {
    timestamp: Timestamp!
    level: LogLevel!
    thread: String!
    message: String!
}

enum OperationResult {
    SUCCESS
    FAILURE
}

type OperationOutcome {
    result: OperationResult!
    msg: String
}

type Query {
    telescopeStatus: TelescopeStatus!
}

type Mutation {
    mountPark: OperationOutcome!
    mountFollow(enable: Boolean!): OperationOutcome!
    rotatorPark: OperationOutcome!
    rotatorFollow(enable: Boolean!): OperationOutcome!
    rotatorConfig(config: RotatorTrackingInput!): OperationOutcome!
    slew(slewParams: SlewInput!): OperationOutcome!
    instrumentSpecifics(instrumentSpecificsParams: InstrumentSpecificsInput!): OperationOutcome!
    oiwfsTarget(target: TargetPropertiesInput!): OperationOutcome!
    oiwfsProbeTracking(config: ProbeTrackingInput!): OperationOutcome!
    oiwfsPark: OperationOutcome!
    oiwfsFollow(enable: Boolean!): OperationOutcome!
}

type Subscription {
    logMessage: LogMessage!
}